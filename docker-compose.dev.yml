version: '3.7'

x-app: &app
  env_file:
    - .env
  restart: always


volumes:
  esdata:
  dbdata:
  redis_data:
  static:
  media:
  minio_storage:
  kafka_0_data:
  kafka_1_data:
  kafka_2_data:
  flasgger_static:

services:
  auth:
    container_name: auth
    build: ./auth
    <<: *app
    volumes:
      - .:/auth
    expose:
      - ${AUTH_API_UVICORN_PORT}
    ports:
      - ${AUTH_API_UVICORN_PORT}:${AUTH_API_UVICORN_PORT}
    depends_on:
      - db
      - redis

  api-migrations:
    build: ./auth
    <<: *app
    volumes:
      - .:/auth
    depends_on:
      - db
      - redis
    command: alembic upgrade head

  django_admin:
    build: django_admin
    image: app-django-admin:dev
    volumes:
      - media:/opt/app/media
      - static:/opt/app/static
    depends_on:
      - db
    env_file:
      - .env
    expose:
      - ${DJANGO_PORT}
    restart: unless-stopped

  app:
    container_name: app
    build: ./app
    <<: *app
    volumes:
      - .:/app
    restart: always
    expose:
      - ${UVICORN_PORT}
    ports:
      - ${UVICORN_PORT}:${UVICORN_PORT}
    depends_on:
      - db
      - elasticsearch
      - redis

  file_api:
    container_name: file_api
    build: ./file_api
    <<: *app
    volumes:
      - .:/file_api
    ports:
      - "8081:8081"
    depends_on:
      - minio
      - db

  ugc_service:
    container_name: ugc_service
    build: ./ugc_service
    <<: *app
    volumes:
      - .:/ugc_service
      - flasgger_static:/usr/local/lib/python3.10/site-packages/flasgger/ui3/static
    ports:
      - "8084:8084"
    depends_on:
      - db
      - kafka-0
      - kafka-1
      - kafka-2

  etl:
    container_name: etl
    build: ./etl/postgres_to_es
    env_file:
      - .env
    <<: *app
    depends_on:
      - db
      - elasticsearch
      - redis

  elasticsearch:
    image: elasticsearch:8.6.2
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms200m -Xmx200m"
    expose:
      - 9200
    ports:
      - ${ELASTIC_PORT}:9200
    volumes:
      - esdata:/usr/share/elasticsearch/data

  db:
    image: ghcr.io/dbsystel/postgresql-partman:14
    container_name: db
    shm_size: 1g
    <<: *app
    expose:
      - 5432
    ports:
      - ${POSTGRES_PORT}:5432
    env_file:
      - .env
    volumes:
      - dbdata:/var/lib/postgresql/data
      - ./etl/dump.sql:/docker-entrypoint-initdb.d/dump.sql

  redis:
    image: redis:alpine
    container_name: redis
    expose:
      - 6379
    ports:
      - ${REDIS_PORT}:6379
    volumes:
      - redis_data:/var/lib/redis

  nginx:
    image: nginx:1.24
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/configs/:/etc/nginx/conf.d/:ro
      - static:/data/static/:ro
      - flasgger_static:/usr/share/nginx/html/flasgger_static/:ro
      - flasgger_static:/data/flasgger_static/:ro
    depends_on:
      - app
      - auth
      - rate_limit
    ports:
      - "80:80"

  minio:
    image: minio/minio
    <<: *app
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
    volumes:
      - minio_storage:/data
    command: server --console-address ":9001" /data

  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: jaeger
    <<: *app
    ports:
      - ${JAEGER_UDP}:6831/udp
      - ${JAEGER_PORT}:16686
    command: [ "--log-level=debug" ]

  rate_limit:
    build: ./rate_limit
    <<: *app
    volumes:
      - .:/rate_limit
    depends_on:
      - app
      - auth

  kafka-0:
    image: bitnami/kafka:3.4
    ports:
      - "9094:9094"
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka-0:9093,1@kafka-1:9093,2@kafka-2:9093
      - KAFKA_KRAFT_CLUSTER_ID=abcdefghijklmnopqrstuv
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka-0:9092,EXTERNAL://127.0.0.1:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
    volumes:
      - kafka_0_data:/bitnami/kafka


  kafka-1:
    image: bitnami/kafka:3.4
    ports:
      - "9095:9095"
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka-0:9093,1@kafka-1:9093,2@kafka-2:9093
      - KAFKA_KRAFT_CLUSTER_ID=abcdefghijklmnopqrstuv
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9095
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka-1:9092,EXTERNAL://127.0.0.1:9095
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
    volumes:
      - kafka_1_data:/bitnami/kafka

  kafka-2:
    image: bitnami/kafka:3.4
    ports:
      - "9096:9096"
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_NODE_ID=2
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka-0:9093,1@kafka-1:9093,2@kafka-2:9093
      - KAFKA_KRAFT_CLUSTER_ID=abcdefghijklmnopqrstuv
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9096
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka-2:9092,EXTERNAL://127.0.0.1:9096
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
    volumes:
      - kafka_2_data:/bitnami/kafka

  ui:
    image: provectuslabs/kafka-ui:v0.7.0
    ports:
      - "8080:8080"
    environment:
      - KAFKA_CLUSTERS_0_BOOTSTRAP_SERVERS=kafka-0:9092
      - KAFKA_CLUSTERS_0_NAME=kraft

  zookeeper:
    image: zookeeper:3.8
    container_name: zookeeper
    hostname: zookeeper

  clickhouse-node1:
    image: clickhouse/clickhouse-server:23
    container_name: clickhouse-node1
    hostname: clickhouse-node1
    ports:
      - "8123:8123"
      - "9010:9000"
    volumes:
      - ./clickhouse/clickhouse_init:/docker-entrypoint-initdb.d
      - ./clickhouse/data/node1:/etc/clickhouse-server
    depends_on:
      - zookeeper

  clickhouse-node2:
    image: clickhouse/clickhouse-server:23
    container_name: clickhouse-node2
    hostname: clickhouse-node2
    ports:
      - "8124:8123"
      - "9011:9000"
    volumes:
      - ./clickhouse/clickhouse_init:/docker-entrypoint-initdb.d
      - ./clickhouse/data/node2:/etc/clickhouse-server
    depends_on:
      - zookeeper

  clickhouse-node3:
    image: clickhouse/clickhouse-server:23
    container_name: clickhouse-node3
    hostname: clickhouse-node3
    ports:
      - "8125:8123"
      - "9012:9000"
    volumes:
      - ./clickhouse/clickhouse_init:/docker-entrypoint-initdb.d
      - ./clickhouse/data/node3:/etc/clickhouse-server
    depends_on:
      - zookeeper

  clickhouse-node4:
    image: clickhouse/clickhouse-server:23
    container_name: clickhouse-node4
    hostname: clickhouse-node4
    ports:
      - "8126:8123"
      - "9013:9000"
    volumes:
      - ./clickhouse/clickhouse_init:/docker-entrypoint-initdb.d
      - ./clickhouse/data/node4:/etc/clickhouse-server
    depends_on:
      - zookeeper

  etl_kafka_clickhouse:
    container_name: etl_kafka_clickhouse
    build: ./etl_kafka_clickhouse
    <<: *app
    depends_on:
      - ugc_service
      - kafka-0
      - kafka-1
      - kafka-2
      - clickhouse-node1
      - clickhouse-node2
      - clickhouse-node3
      - clickhouse-node4